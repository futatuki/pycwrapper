#!/usr/bin/env python
# $yfId$
import os.path 

numptr_basename = 'numptr'
cobj_import_text="from .cobj cimport CObjPtr\n"
bcls_text="CObjPtr"
ncls_seeds = [
    {'ctype' : 'int',                'clsname' : 'CIntPtr',     'defval' : 0},
    {'ctype' : 'unsigned int',       'clsname' : 'CUIntPtr',    'defval' : 0},
    {'ctype' : 'short',              'clsname' : 'CShortPtr',   'defval' : 0},
    {'ctype' : 'unsigned short',     'clsname' : 'CUShortPtr',  'defval' : 0},
    {'ctype' : 'long',               'clsname' : 'CLongPtr',    'defval' : 0},
    {'ctype' : 'unsigned long',      'clsname' : 'CULongPtr',   'defval' : 0},
    {'ctype' : 'long long',          'clsname' : 'CLLongPtr',   'defval' : 0},
    {'ctype' : 'unsigned long long', 'clsname' : 'CULLongPtr',  'defval' : 0},
    {'ctype' : 'float',              'clsname' : 'CFloatPtr',   'defval' : 0},
    {'ctype' : 'double',             'clsname' : 'CDoublePtr',  'defval' : 0},
    {'ctype' : 'long double',        'clsname' : 'CLDoublePtr', 'defval' : 0}]


def fileheader(fname, import_text):
    return """# %s, generated by
#   $yfId$
from __future__ import absolute_import
%s
""" % (fname, import_text)

def clsdcl(sdict):
    return """cdef class %(clsname)s(%(bclsname)s): 
    pass
""" % sdict

def numclsdef(sdict):
    return """
cdef class %(clsname)s(%(bclsname)s):
    def __cinit__(self, vals=None, nelms=0, int is_const=False, **m):
        cdef object c_base
        c_base = ('const ' if is_const else '') + '%(ctype)s'
        self._c_base_type = c_base
        self._c_esize = sizeof(%(ctype)s)
        self._mddict = { 'p_' : %(defval)s }
    @property
    def p_(self):
        assert self._c_ptr is not NULL
        return (<%(ctype)s *>(self._c_ptr))[0]
    @p_.setter
    def p_(self, val):
        assert self._c_ptr is not NULL
        if self._is_const and self._is_init:
            raise TypeError('Pointer points const value. Cannot alter')
        (<%(ctype)s*>(self._c_ptr))[0] = val
    @p_.deleter
    def p_(self):
        assert self._c_ptr is not NULL
        (<%(ctype)s*>(self._c_ptr))[0] = %(defval)s
""" % sdict

def write_cython_src(prefix=None, basename=numptr_basename,
        import_text=cobj_import_text, clsdef=ncls_seeds, bcls_name=bcls_text):

    if prefix:
        pxdfname = os.path.join(prefix, basename + '.pxd')
        pyxfname = os.path.join(prefix, basename + '.pyx')
    else:
        pxdfname = basename + '.pxd'
        pyxfname = basename + '.pyx'
    pxdfile = open(pxdfname, 'w')
    pyxfile = open(pyxfname, 'w')
    # write header
    pxdfile.write(fileheader(pxdfname,import_text))
    pyxfile.write(fileheader(pyxfname,import_text))
    for s in clsdef:
        s['bclsname'] = bcls_name
        pxdfile.write(clsdcl(s))
        pyxfile.write(numclsdef(s))
    pxdfile.close()
    pyxfile.close()

def main():
    write_cython_src()

if __name__ == "__main__":
    main()
